name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  EC2_PUBLIC_IP: "18.233.252.250"  # Fallback if secret not set

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch numpy scikit-learn pandas
    
    - name: Run CI tests
      run: |
        python ci_test.py

  build-docker:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      run: |
        docker build -t bike-rental-prediction .
        docker tag bike-rental-prediction:latest $ECR_REGISTRY/bike-rental-prediction:latest
        docker push $ECR_REGISTRY/bike-rental-prediction:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      run: |
        # Use fallback if HOST is not set
        if [ -z "$HOST" ]; then
          HOST="18.233.252.250"
          echo "Using fallback HOST: $HOST"
        fi
        
        if [ -z "$USER" ]; then
          USER="ubuntu"
          echo "Using fallback USER: $USER"
        fi
        
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        
        ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST << 'ENDSSH'
          docker stop bike-rental-api 2>/dev/null || true
          docker rm bike-rental-api 2>/dev/null || true
          
          aws ecr get-login-password --region us-east-1 | \
            docker login --username AWS --password-stdin 453553127570.dkr.ecr.us-east-1.amazonaws.com
          
          docker pull 453553127570.dkr.ecr.us-east-1.amazonaws.com/bike-rental-prediction:latest
          
          docker run -d \
            --name bike-rental-api \
            -p 80:1234 \
            --restart unless-stopped \
            453553127570.dkr.ecr.us-east-1.amazonaws.com/bike-rental-prediction:latest
          
          sleep 5
          docker ps
        ENDSSH
        
        rm -f private_key.pem

  integration-tests:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v3
    
    - name: Test production API
      run: |
        # Use the EC2_HOST secret or fallback to known IP
        API_HOST="${{ secrets.EC2_HOST }}"
        if [ -z "$API_HOST" ]; then
          API_HOST="18.233.252.250"
          echo "Using fallback host: $API_HOST"
        fi
        
        API_URL="http://${API_HOST}"
        
        echo "üîç Testing production API at ${API_URL}..."
        
        # Add timeout and retry logic
        MAX_RETRIES=3
        RETRY_COUNT=0
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          echo "Attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES"
          
          # Test health endpoint with timeout
          if curl -f --connect-timeout 10 --max-time 30 ${API_URL}/health; then
            echo "‚úÖ Health check passed"
            break
          else
            echo "‚ùå Health check failed, retrying..."
            RETRY_COUNT=$((RETRY_COUNT + 1))
            sleep 10
          fi
        done
        
        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
          echo "‚ùå Health check failed after $MAX_RETRIES attempts"
          exit 1
        fi
        
        # Test root endpoint
        curl -f --connect-timeout 10 --max-time 30 ${API_URL}/
        echo "‚úÖ Root endpoint passed"
        
        # Test predict endpoint
        curl -f --connect-timeout 10 --max-time 30 -X POST ${API_URL}/predict \
          -H "Content-Type: application/json" \
          -d '{"features": [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.1, 0.2, 0.3]}'
        echo "‚úÖ Predict endpoint passed"
        
        echo "‚úÖ All integration tests passed!"
