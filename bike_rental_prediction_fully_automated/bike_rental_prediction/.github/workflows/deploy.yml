name: Deploy to EC2

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    needs: [test, build-docker]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
    
    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      run: |
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        
        echo "üöÄ Deploying to EC2..."
        
        ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST << ENDSSH
          echo "üì¶ Updating Docker container on EC2..."
          
          # Stop and remove old container
          docker stop bike-rental-api 2>/dev/null || true
          docker rm bike-rental-api 2>/dev/null || true
          
          # Remove old images to force fresh pull
          docker rmi ${ECR_REGISTRY}/bike-rental-prediction:latest 2>/dev/null || true
          
          # Login to ECR
          aws ecr get-login-password --region us-east-1 | \
            docker login --username AWS --password-stdin ${ECR_REGISTRY}
          
          # Pull latest image (force fresh pull)
          docker pull ${ECR_REGISTRY}/bike-rental-prediction:latest
          
          # Run new container
          docker run -d \
            --name bike-rental-api \
            -p 80:1234 \
            --restart unless-stopped \
            ${ECR_REGISTRY}/bike-rental-prediction:latest
          
          # Wait for container to start
          sleep 5
          
          # Verify deployment
          echo "üîç Verifying deployment..."
          docker ps | grep bike-rental-api
          
          # Test endpoints
          echo "Testing endpoints..."
          curl -f http://localhost/health || exit 1
          echo "‚úÖ Health check passed"
          
          # Show logs
          echo "üìã Container logs:"
          docker logs --tail 20 bike-rental-api
        ENDSSH
        
        rm -f private_key.pem
        echo "‚úÖ Deployment complete!"
    
    - name: Verify deployment from GitHub
      run: |
        echo "üîç Testing deployed API from GitHub Actions..."
        curl -f http://${{ secrets.EC2_HOST }}/health
        echo "‚úÖ API is healthy and accessible!"
