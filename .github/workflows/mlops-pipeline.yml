name: MLOps CI/CD - Bike Rental Prediction

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: bike-rental-prediction
  AWS_REGION: us-east-1
  ECR_REPOSITORY: bike-rental-prediction

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: bike_rental_prediction_fully_automated/bike_rental_prediction
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch pandas numpy scikit-learn
        
    - name: Run comprehensive CI tests
      run: |
        python ci_test.py

  build-docker:
    runs-on: ubuntu-latest
    needs: test
    defaults:
      run:
        working-directory: bike_rental_prediction_fully_automated/bike_rental_prediction
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
          
    - name: Build Docker image
      run: docker build -t ${{ env.DOCKER_IMAGE }} .

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build-docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build and push Docker image to ECR
      working-directory: bike_rental_prediction_fully_automated/bike_rental_prediction
      run: |
        docker build -t $ECR_REPOSITORY .
        docker tag $ECR_REPOSITORY:latest ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:latest
        docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:latest
        
    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
      run: |
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        
        ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
          docker stop bike-rental-api || true
          docker rm bike-rental-api || true
          
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          
          docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          docker run -d --name bike-rental-api -p 80:1234 --restart unless-stopped \
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
        EOF
        
        rm -f private_key.pem

  integration-tests:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Test production API
      run: |
        echo "🧪 Testing production API endpoints..."
        
        # Health check
        curl -f "http://${{ secrets.EC2_HOST }}/health" && echo "✅ Health check passed" || echo "⚠️ Health check failed"
        
        # Prediction test
        response=$(curl -s -X POST "http://${{ secrets.EC2_HOST }}/invocations" \
          -H "Content-Type: application/json" \
          -d '{
            "inputs": [[0.99, -0.17, -1.47, 1.57, 1.29, -1.85, 0.03, -0.58, 1.69, -0.57, -0.59, -0.30, -0.01, -0.29, -0.30, -0.30, -0.31, 3.33, -0.31, -0.30, -0.30, -0.30, -0.30, -0.31, -0.21, -0.21, -0.20, -0.20, -0.21, -0.21, -0.21, -0.21, -0.21, -0.21, -0.21, -0.21, -0.21, -0.21, -0.21, -0.21, -0.21, -0.21, 4.78, -0.21, -0.21, -0.21, -0.21, -0.41, -0.41, -0.41, -0.41, -0.41, 2.43]]
          }')
        
        if echo "$response" | grep -q "predictions"; then
          echo "✅ Prediction API working: $response"
        else
          echo "⚠️ Prediction API response: $response"
        fi
